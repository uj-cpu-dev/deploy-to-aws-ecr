name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REGION: us-east-1  # Replace with your AWS region
  IMAGE_REPO_NAME: my-app  # Replace with your ECR repository name

permissions:
  contents: read
  id-token: write
  packages: write
  actions: write

jobs:
  # 1. Generate Pipeline (Optional: Dynamic steps for scaffolding/config)
  generate-pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Generate workflow files
        run: |
          python /.github/scripts/init.py  # Replace with your script

  # Node.js Specific Workflow
  nodejs:
    name: Node.js Workflow
    runs-on: ubuntu-latest
    needs: [generate-pipeline]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Run Linter
        run: npm run lint  # Replace with your linter command

      - name: Run Tests
        run: npm run test  # Replace with your test command

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_REPO_NAME:latest .

      - name: Tag Docker image
        run: |
          IMAGE_TAG=feature-branch-${{ github.sha }}
          docker tag $IMAGE_REPO_NAME:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  # Java Specific Workflow
  java:
    name: Java Workflow
    runs-on: ubuntu-latest
    needs: [generate-pipeline]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test
        run: mvn clean verify

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_REPO_NAME:latest .

      - name: Tag Docker image
        run: |
          IMAGE_TAG=feature-branch-${{ github.sha }}
          docker tag $IMAGE_REPO_NAME:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  # Push Docker Image to ECR
  push-to-ecr:
    runs-on: ubuntu-latest
    needs: [nodejs, java]
    steps:
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
