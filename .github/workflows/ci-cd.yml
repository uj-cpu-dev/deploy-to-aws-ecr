name: CI/CD Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string

env:
  ECR_REGION: us-east-1
  IMAGE_REPO_NAME: 992382383822.dkr.ecr.us-east-1.amazonaws.com/my-java-app
  AWS_ACCOUNT_ID: 992382383822

permissions:
  contents: read
  id-token: write
  packages: write
  actions: write

jobs:
  # 1. Generate Pipeline
  generate-pipeline:
    name: Generate Pipeline
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      java_version: ${{ steps.extract-java.outputs.version }}
      node_version: ${{ steps.extract-node.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5  # Updated to latest version
        with:
          python-version: '3.9'

      - name: Detect Project Type
        id: detect
        run: |
          if [ -f "package.json" ]; then
            echo "language=nodejs" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ]; then
            echo "language=java" >> $GITHUB_OUTPUT
          elif [ -f "build.gradle" ]; then 
            echo "language=gradle" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "language=go" >> $GITHUB_OUTPUT
          else
            echo "language=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Extract Java Version
        if: steps.detect.outputs.language == 'java'
        id: extract-java
        run: |
          JAVA_VERSION=$(grep '<java.version>' pom.xml | head -n 1 | sed 's/.*<java.version>\(.*\)<\/java.version>.*/\1/')
          echo "version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Extract Node.js Version
        if: steps.detect.outputs.language == 'nodejs'
        id: extract-node
        run: |
          NODE_VERSION=$(jq -r '.engines.node // "16"' package.json)
          echo "version=$NODE_VERSION" >> $GITHUB_OUTPUT

  # 2. Run Tests
  run-tests:
    name: Run Tests
    needs: generate-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: needs.generate-pipeline.outputs.language == 'nodejs'
        uses: actions/setup-node@v4  # Updated version
        with:
          node-version: ${{ needs.generate-pipeline.outputs.node_version }}

      - name: Run Node.js Tests
        if: needs.generate-pipeline.outputs.language == 'nodejs'
        run: |
          echo "Running Node.js tests"
          npm install
          npm run lint
          npm run test

      - name: Set up Java
        if: needs.generate-pipeline.outputs.language == 'java'
        uses: actions/setup-java@v4  # Updated version
        with:
          distribution: 'temurin'
          java-version: ${{ needs.generate-pipeline.outputs.java_version }}

      - name: Run Java Tests
        if: needs.generate-pipeline.outputs.language == 'java'
        run: |
          echo "Running Java tests"
          mvn clean verify

  # 3. Build Docker Image
  build:
    name: Build Application
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build --build-arg JAVA_VERSION=${{ needs.generate-pipeline.outputs.java_version }} -t $IMAGE_REPO_NAME:latest .

      - name: Tag Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag $IMAGE_REPO_NAME:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  # 4. Push to Amazon ECR
  push-to-ecr:
    name: Push to Amazon ECR
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NA
