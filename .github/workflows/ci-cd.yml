name: CI/CD Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      backend_dynamodb_table:
        description: DynamoDB table for State lock
        default: "terraform-backend-ddb"
        type: string
      backend_s3_bucket:
        description: Name of the S3bucket for Terraform backend
        default: "terraform-backend-primary-ec2"
        type: string

env:
  AWS_REGION: us-east-1
  IMAGE_REPO_NAME: my-java-app
  AWS_ACCOUNT_ID: 992382383822
  IAM_ROLE: github-actions-runner

permissions:
  contents: read
  id-token: write
  packages: write
  actions: write

jobs:
  generate-pipeline:
    name: Generate Pipeline
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      java_version: ${{ steps.extract-java.outputs.version }}
      node_version: ${{ steps.extract-node.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Project Type
        id: detect
        run: |
          if [ -f "package.json" ]; then
            echo "language=nodejs" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ]; then
            echo "language=java" >> $GITHUB_OUTPUT
          elif [ -f "build.gradle" ]; then 
            echo "language=gradle" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "language=go" >> $GITHUB_OUTPUT
          else
            echo "language=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Extract Java Version
        if: steps.detect.outputs.language == 'java'
        id: extract-java
        run: |
          JAVA_VERSION=$(grep '<java.version>' pom.xml | head -n 1 | sed 's/.*<java.version>\(.*\)<\/java.version>.*/\1/')
          echo "version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Extract Node.js Version
        if: steps.detect.outputs.language == 'nodejs'
        id: extract-node
        run: |
          NODE_VERSION=$(jq -r '.engines.node // "16"' package.json)
          echo "version=$NODE_VERSION" >> $GITHUB_OUTPUT
  

  run-tests:
    name: Run Tests
    needs: generate-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: needs.generate-pipeline.outputs.language == 'nodejs'
        uses: actions/setup-node@v4  # Updated version
        with:
          node-version: ${{ needs.generate-pipeline.outputs.node_version }}

      - name: Run Node.js Tests
        if: needs.generate-pipeline.outputs.language == 'nodejs'
        run: |
          echo "Running Node.js tests"
          npm install
          npm run lint
          npm run test

      - name: Set up Java
        if: needs.generate-pipeline.outputs.language == 'java'
        uses: actions/setup-java@v4  # Updated version
        with:
          distribution: 'temurin'
          java-version: ${{ needs.generate-pipeline.outputs.java_version }}

      - name: Run Java Tests
        if: needs.generate-pipeline.outputs.language == 'java'
        run: |
          echo "Running Java tests"
          mvn clean verify
          

  terraform-provision:
    name: Terraform Provisioning
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::992382383822:role/github-actions-runner
          audience: sts.amazonaws.com
          aws-region: us-east-1

      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
        with:
          repository: uj-cpu-dev/deploy-to-aws-ecr
          ref: main

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ env.AWS_REGION }}' \
            -backend-config='bucket=${{ inputs.backend_s3_bucket }}' \
            -backend-config='key=docker-ecr-terraform-${{ env.IMAGE_REPO_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ inputs.backend_dynamodb_table }}'

      - name: Terraform Apply
        working-directory: terraform
        run: |
          set -eux
          terraform apply -auto-approve \
          -var="region=${{ env.AWS_REGION }}" \
          -var="bucket=${{ inputs.backend_s3_bucket }}" \
          -var="key=docker-ecr-terraform-${{ env.IMAGE_REPO_NAME }}.tfstate" \
          -var="dynamodb_table=${{ inputs.backend_dynamodb_table }}" \
          -var="role_arn=arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.IAM_ROLE }}" \
          -var="repository_name=${{ env.IMAGE_REPO_NAME }}"


  push-to-ecr:
    name: Build Tag and Push to Amazon ECR
    needs: terraform-provision
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::992382383822:role/github-actions-runner
          audience: sts.amazonaws.com
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
          skip-logout: false

      - name: Generate Image Tag
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)  # Get first 7 characters of commit SHA
          IMAGE_TAG=feature-branch-${COMMIT_SHA:0:7}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker Image
        run: |
          docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
          docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG