name: CI/CD Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string

env:
  ECR_REGION: us-east-1
  IMAGE_REPO_NAME: 992382383822.dkr.ecr.us-east-1.amazonaws.com/my-java-app
  AWS_ACCOUNT_ID: 992382383822

permissions:
  contents: read
  id-token: write
  packages: write
  actions: write

jobs:
  # 1. Generate Pipeline
  generate-pipeline:
    name: Generate Pipeline
    runs-on: ubuntu-latest
    outputs:
      language: ${{ inputs.language }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Detect Project Type
        id: detect
        run: |
          if [ -f "package.json" ]; then
            echo "nodejs"
          elif [ -f "pom.xml" ]; then
            echo "java"
          elif [ -f "build.gradle" ]; then 
            echo "gradle"
          elif [ -f "go.mod" ]; then
            echo "go"
          else
            echo "unknown"
          fi
          echo "::set-output name=language::$(cat <<<'${{ steps.detect-language.outputs }}')" 

      - name: Extract Java Version
        if: steps.detect.outputs.language == 'java'
        id: extract-java
        run: |
          JAVA_VERSION=$(grep '<java.version>' pom.xml | head -n 1 | sed 's/.*<java.version>\(.*\)<\/java.version>.*/\1/')
          echo "Java version extracted: $JAVA_VERSION"
          echo "::set-output name=version::$JAVA_VERSION"

      - name: Extract Node.js Version
        if: steps.detect.outputs.language == 'nodejs'
        id: extract-node
        run: |
          NODE_VERSION=$(cat package.json | jq -r '.engines.node // empty')
          if [ -z "$NODE_VERSION" ]; then
            NODE_VERSION="16"  # Default version if not specified
          fi
          echo "Node.js version extracted: $NODE_VERSION"
          echo "::set-output name=version::$NODE_VERSION"

  # 2. Run Tests
  run-tests:
    name: Run Tests
    needs: generate-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Environment and Run Tests
        if: needs.generate-pipeline.outputs.language == 'nodejs'
        run: |
          echo "Running Node.js tests"
          curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install
          npm run lint
          npm run test

      - name: Set up Java and Run Tests
        needs: generate-pipeline
        if: needs.generate-pipeline.outputs.language == 'java'
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Set up Java
            uses: actions/setup-java@v3
            with:
              distribution: 'temurin'
              java-version: ${{ needs.generate-pipeline.outputs.java_version }}

          - name: Cache Maven Dependencies
            uses: actions/cache@v3
            with:
              path: ~/.m2/repository
              key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
              restore-keys: |
                ${{ runner.os }}-maven-

          - name: Build and Test
            run: mvn clean verify

  # 3. Build
  build:
    name: Build Application
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image for Node.js
        if: needs.generate-pipeline.outputs.language == 'nodejs'
        run: |
          docker build -t $IMAGE_REPO_NAME:latest .

      - name: Build Docker Image for Java
        if: needs.generate-pipeline.outputs.language == 'java'
        run: |
          docker build -t $IMAGE_REPO_NAME:latest .

      - name: Tag Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag $IMAGE_REPO_NAME:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  # 4. Push to ECR
  push-to-ecr:
    name: Push to Amazon ECR
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_REGION }}.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
